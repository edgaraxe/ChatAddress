/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Server;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.SwingUtilities;

/**
 *
 * @author Edgar
 */
public class ServerUpdate extends javax.swing.JFrame {
    private Socket initializeConnection;
    private ServerSocket serverSocket;
    private ObjectInputStream streamInput;
    private ObjectOutputStream streamOutput;

    /**
     * Creates new form ServerUpdate
     */
    public ServerUpdate() {
        initComponents();
    }
    public void prepare() {
        try {
            /**
             * Position of the port number. Change the second integer if needed
             * for the alpha only 2 people! change it to more later once more
             * stable
             */
            serverSocket = new ServerSocket(1337, 6);
            while (true) {
                try {
                    connect();
                    setUp();
                    sending();
                } catch (EOFException eof) {
                    // End of a stream connection
                    display("Connection lost! \n");
                } finally {
                    close();

                }
            }
        } catch (IOException ioException) {
            ioException.printStackTrace();
        }
    }

    // Connection method when the user logs in.
    private void connect() throws IOException {
        display("Waiting for the client.jar...\n");
        // Accept connection to the socket.
        initializeConnection = serverSocket.accept();
        // returns the adress and the IP adress.
        display("Connected to: \n" + initializeConnection.getInetAddress().getHostAddress());

    }

    public void setUp() throws IOException {
        /**
         * Creating a pathway to another what computer is going be connected to
         * in the connection method?
         */

        streamOutput = new ObjectOutputStream(initializeConnection.getOutputStream());
        streamOutput.flush();
        streamInput = new ObjectInputStream(initializeConnection.getInputStream());
        display("\nFinished! ");

    }

    /**
     * A command that terminates the connection between them if the user types
     * "END".
     *
     */
    private void sending() throws IOException {
        String message = "Connected :)!";
        send(message);
        type(true);
        do {
            try {
                message = (String)streamInput.readObject();
                display("\n" + message);
            } catch (ClassNotFoundException cls) {
                display("ERROR something went wrong please reload! :(");
            }

        } while (!message.equals("Close"));
    }

    // Close streams and sockets.
    public void close() {
        display("Lost connection...");
        type(false);
        try {

            streamOutput.close();
            streamInput.close();
            initializeConnection.close();
        } catch (IOException io) {
            io.printStackTrace();
        }

    }

    private void send(String message) {
        try {
            Calendar cal = Calendar.getInstance();
            Date time = cal.getTime();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            
            streamOutput.writeObject("[" + sdf.format(time) + "]" + " Admin:" + message);
            streamOutput.flush();
            display("\n" + "[" + sdf.format(time) + "]" + " Admin:" + message);
        } catch (IOException ioe) {
            chatArea.append("\n Can't send this specific message!:(");
        }

    }

    /*
     * The history of the chat window method. Updates parts of the GUI.
     */
    private void display(final String text) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                chatArea.append(text);
            }

        }
        );

    }

    /**
     * Allows the user to type in specific times. tor= true or false.
     */
    private void type(final boolean torf) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {

                userInput.setEditable(torf);
            }

        }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        userInput = new javax.swing.JTextField();
        send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setRows(5);
        jScrollPane1.setViewportView(chatArea);

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userInput, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(send))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
         send(userInput.getText());
                userInput.setText("");
    }//GEN-LAST:event_sendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
      
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerUpdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ServerUpdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton send;
    private javax.swing.JTextField userInput;
    // End of variables declaration//GEN-END:variables
}
