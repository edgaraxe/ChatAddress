/*
 * This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. 
 * http://creativecommons.org/licenses/by-nc/3.0/
 */
package ChatAddress;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;

/**
 *
 * @author Edgar, Sara, Andre
 */
public class Client extends javax.swing.JFrame {

    private ObjectOutputStream outputStream;
    private ObjectInputStream inputStream;
    private String message = "";
    private String ip;
    private Socket initializeConnection;

    /**
     * Creates new form Client
     */
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        userInput = new javax.swing.JTextField();
        send = new javax.swing.JButton();

        setResizable(false);

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setRows(5);
        jScrollPane1.setViewportView(chatArea);

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userInput, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(send))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        send(userInput.getText());
        userInput.setText("");
    }//GEN-LAST:event_sendActionPerformed
    public void prepare() {
        try {

            connect();
            steams();

            //NNA
            //chat();
            Thread t = new Thread(new Runnable() {

                @Override
                public void run() {
                    type(true);
                    do {
                        try {
                            message = (String) inputStream.readObject();
                            display("\n" + message);
                        } catch (ClassNotFoundException cnfe) {
                            display("\n Invalid input!");

                        } catch (IOException ex) {
                            Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } while (!message.equalsIgnoreCase("Close"));
                    close();
                }
            });
            t.start();

        } catch (EOFException eof) {
            display("\nUser terminated the connection");
        } catch (IOException io) {
            io.printStackTrace();
        }

    }

    /**
     *
     * Connect to the server.
     */
    private void connect() throws IOException {
        display("Attempting to connect \n");
        // Send in to the port.
        initializeConnection = new Socket(InetAddress.getByName(ip), 1337);
        display("Connected to: \n" + initializeConnection.getInetAddress().getHostName());

    }

    /**
     *
     * Preparing the streams and the connection.
     */
    private void steams() throws IOException {
        outputStream = new ObjectOutputStream(initializeConnection.getOutputStream());
        outputStream.flush();
        inputStream = new ObjectInputStream(initializeConnection.getInputStream());

        display("\nConnection successfully established!");

    }

    // while in chat  with the sever.
    private void chat() throws IOException {
        type(true);
        do {
            try {
                message = (String) inputStream.readObject();
                display("\n"  + message);
            } catch (ClassNotFoundException cnfe) {
                display("\n Invalid input!");

            }
        } while (!message.equalsIgnoreCase("Close"));
    }

    // close the application
    private void close() {
        display("\nLost connection with the server :(!");
        type(false);

        try {

            outputStream.close();
            inputStream.close();

            initializeConnection.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    // send message to the server
    private void send(String message) {
        try {
            Calendar cal = Calendar.getInstance();
            Date time = cal.getTime();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

            outputStream.writeObject("[" + sdf.format(time) + "]" + " User:" + message);
            outputStream.flush();
            display("\n" + "[" + sdf.format(time) + "]" + " User:" + message);
        } catch (IOException ioe) {
            chatArea.append("\n Offline please check the connection or contact a admin.");
        }
    }

    // change or update chat window
    private void display(final String messages) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                chatArea.append(messages);

            }
        });

    }

    // gives user permission to type.
    private void type(final boolean tof) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                userInput.setEditable(tof);
            }
        });

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton send;
    private javax.swing.JTextField userInput;
    // End of variables declaration//GEN-END:variables
}
